[DEFAULT]
# Note: Use configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation(), allow_no_value=True)
## Misc settings that don't fit elsewhere
# (beyond type_instance: atom and bind_s : False)

[LOGGING]
# Control detailed logging elements here
# If True, use acab.core.util.log_formatter
# else just install the AcabMinimalLogRecord
ACAB          = True

STREAM_FORMAT = {levelname:10} : {message}
FILE_FORMAT   = {levelname:10} : {shortname} : {message}

# Overriden by CLI for the repl, otherwise:
STREAM_LEVEL  = WARNING
FILE_LEVEL    = DEBUG

SEMANTIC      = WARNING # Separate file level semantic trace

# If True, attach a warning log to node and value destructors:
DEL           = False

[Handler.System]
DEFAULT_SIGNAL = _default

[Config.Constraints]
# LHS value/s must be found in RHS
# Splits on '/' for section:parameter
Print.Annotations  = Value.Structure

[Imports]
# Target Name to try to import when importing a module
# before falling back to __init__
# ie: import a.b.c -> a.b.c.{target}
# See module_loader
MODULE_TARGET = module

[Imports.Targeted]
# Specific classes to use accessed through config,
# Rather than the parse/semantic/print AcabModules
# use config.actions_e.IMCLASS to import,
# and pass an interface/protocol it has to match in args={'interface': {}}
value_meta = acab.core.meta_classes.value.ValueMeta
# value_meta = acab.modules.values.string_cache_val.caching_meta.StringCacheValueMeta
bind       = acab.modules.values.binding.binding.Bind
context    = acab.modules.context.context_set.ContextSet
debug      = acab.modules.debugger.running_debugger.RunningDebugger
engine     = acab.modules.engines.basic_engine.AcabBasicEngine
handler    = acab.core.util.patch_handler.PatchHandler
reduction  = acab.module.values.reduction.reduction.AcabReduction

[Data]
# The base root name in a data structure:
ROOT                  = __root
TYPE_BASE             = ATOM
DEFAULT_SETUP_METHOD  = _default_setup
DEFAULT_UPDATE_METHOD = _update_node

[Type.Primitive]
# Names to be turned into the base type sentences
# on top of TYPE_BASE
# TODO add action_operator? instruction?
ACTION
COMPONENT
CONTAINER
INSTRUCT
OPERATOR_PRIM
QUERY
REGEX
RULE
SENTENCE
STRING
STRUCTURE
TRANSFORM

[Value.Structure]
# These are used in AcabValue.data
# to add metadata
ARG
AT_BIND
BIND
CONSTRAINT
NAME
NEGATION
OPERATOR
PARAMS
QUERY
QUERY_FALLBACK
SEN
TAG
TYPE_INSTANCE
SEMANTIC_HINT
FLATTEN

[Structure.Components]
# Used for Production Structure's sub-structure
TRANSFORM
QUERY
ACTION

[Symbols]
[Aliases]
[MODAL]
[Print.Signals]
[Parse.Signals]
[Semantic.Signals]

[Operator.Sugar]
ASSERT          = !!
PRINT           = %
REBIND          = §
EQ              = ==
NEQ             = !=
REGEX_MATCH     = ~=
ELEM            = ∈
TYPEMATCH       = τ=
REGEX_TRANSFORM = ~:
FORMAT          = %:
DFS             = ᛦ
